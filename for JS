<script src="..."></script>   -----  Подключение cкрипта из файла по указанному src


var i = 5;   --------   объявление перемменной i и присвоить ей числовое значение 5


сonsole.log()    --------      вывести в консоль значение внутри скобок()


//           -------------         однострочный комментарий выделяется слешом//


/*   */      --------    многострочный комментарий начало комментария  ----   /*      конец комментария   */


;    ----    точка с запятой может служить пустой инструкцией, прииспользовании нескольких скрипт файлов рекомендуется писать ее в первой строке нового файла


___________________________________________________________________________________________________________________________________________________________________


ТИПЫ ДАННЫХ:

		ПРИМИТИВНЫЕ:

		Числа

		Строки  в "" и  ''

		Булевые значения  true false     (результат логических операций, используется в условных инструкциях) пример: var x=4;  x > 5 (false);   x<5(true)

		none   отсутствие значения

		underfined отсутствие значения



		ОБЪЕКТНЫЕ
		также называют ссылочными типами.
		заключаются в фигурные скобки

		var owerFirstObject = {x: 5, y: 'string'}     в переменной owerFirstObject   ссылается на объект в фигурных скобках (поэтому называют объектными)

		console.log(owerFirstObject.x);     ------    выведет в консоль элемент x   из объекта owerFirstObject

___________________________________________________________________________________________________________________________________________________________________


ОПЕРАТОРЫ:

						a  + b      где a,b-  ОПЕРАНД,    +  это ОПЕРАТОР	

						a--       a=a-1 

						a++ =     a=a+1     ----   ИНКРЕМЕНТ

						b *= 2      =  b*2  (можно использовать со всеми операторами)


		АРИФМЕТИЧЕСКИЕ:

		+ 
		-
		/
		*
		%   - остаток от деления  3 % 2    (остаток от деления будет равен 1)




		ЛОГИЧЕСКИЕ операторы - результат возвращают булевое значение(false, true):

		>
		<
		==   условие(т.к. = оператор присваивания)
		=== строгое сравнение
		>=
		<=
		!=  неравно
		||   или
		&&    и



		СТРОКОВЫЕ ОПЕРАТОРЫ:
		+   в строке используется как оператор КОНКОТЕНАЦИЯ



		ПРИСВАИВАНИЯ
		=



		ТЕРНАРНЫй
		ПРИМЕР
		(2<4)  ? (1st)  :  (2d);   если 2 меньше четырех  выполняется   за знаком вопроса, если false  за знаком двоеточие.    (Выполнится 1st)


		___________________________________________________________________________________________________________________________________________________________________



УСЛОВНЫЕ ОПЕРАТОРЫ
	
	if (3>2) {
		console.log('>");
		console.log('>=');
	} else {
		console.log('else');
	}



	switch (3){
		case 2 : {console.log();}
			break;									  выход из условной инструкции(если  break не будет, дойдет до соответсвия(case) и выведудтся все нижние case)
		case 3 : console.log();                       конструкция совпадает, пройдет эта инструкция
			break;
		case 1 : console.log();                      
			break;
		default  : console.log();                     если ни одно изусловий case не пройдет будет выполнено default 
			break;
	}




	(5>10) ? console.log(1) : console.log(2)              после ? true      после :  false

___________________________________________________________________________________________________________________________________________________________________

ФУНКЦИИ:
	Функция является объектом в JScript
		Объявление  функций:
	
	1 способ

		function sayHello(){
			console.log('Hello, world!');                     //объявление функции
		}

		sayHello();                                            //вызов функции

	2 способ


		var sayHi = function() {
			console.log('Hello, world!'); 
		}

		sayHi();

	ПАРАМЕТРЫ ФУНКЦИЙ:

	var a =  1;
	var b = 2;
													 //Don't repeat yourself
	function sum(x, y) {                             //x, y  - являются параметрами функции sum()
		return  x+y;								 // возвращение требования функции(пишем что требуется выполнить в функции) 
	}	

	sum(a, b);                                       //в скобках указываются аргументы(значения параметров), в том же порядке, что и в присваивании параметров
	console.log(sum(a, b));





    var sayHi = function(){
    	console.log('Hello,' + name);                           строка +  параметр         
    };

    sayHi('Petia');
    sayHi('King');
    sayHi('Sir');
___________________________________________________________________________________________________________________________________________________________________


ЦИКЛЫ:

	var count = 5;

	function sayHi() {
		console.log("Hi!")
	}

	sayHi();sayHi();sayHi();sayHi();sayHi();

	

	
	for (var i = 0; i < count; i++) {                       //инициализация счётчика(переменная i; условие до которого будет выполняться функция; добавление 1 к счётчику)
		sayHi();
	}



	for (var i = 0; i < count; i++) {                       
		if (i==3) {
			break;
		}
		else {
			sayHi();
		}
	}


	for (var i = 0; i < count; i++) {                       
		if (i==3) {
			continue;										//при i=3, пропустит условие(вернет к следующему действию)
		}
		else {
			sayHi();
		}
	}


	ЦИКЛ WHILE
	var i = 0;
	while (i<count) {
		sayHi();
		i++;
	}

																разница между while     и    do....while     -   во втором случае функция выполнится один раз, а затем проверит условие, еслионо верное вернется обратно к выполнению функиции

	do {
		sayHi();
		i++;
	} while (i < count);

____________________________________________________________________________________________________________________________________________________________________

ОБЛАСТЬ ВИДИМОСТИ:

	Локальная



	Глобальная


____________________________________________________________________________________________________________________________________________________________________

ОБЪЕКТЫ:
	var user1 = {};
	var user2 = new Object({});

	